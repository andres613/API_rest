Para este ejemplo, cabe notar que el archivo de configuracion application.properties está de la siguiente manera:

-------------------||-------------------
spring.datasource.url=jdbc:mysql://localhost:3306/api_rest
spring.datasource.username=root
spring.datasource.password=

spring.application.name=api_rest
server.servlet.context-path=/api_rest
-------------------||-------------------

Por lo que se puede observar, se le ha designado un nombre al proyecto (api_rest) que será usado conjuntamente con el endpoint para poder hacer las operaciones
en los métodos post, get, put y delete que han sido nombrados con un alias cada uno


Post
curl --location --request POST 'http://localhost:8080/api_rest/api/person/post' --header 'Content-Type: application/json' --data-raw '{"name":"l","email":"l@l.com","age":12}' | jq
Get todos
curl --location --request GET 'http://localhost:8080/api_rest/api/person/' | jq
Get por id
curl --location --request GET 'http://localhost:8080/api_rest/api/person/getById?id=2' | jq
Put
curl -X PUT -H "Content-Type: application/json" -d '{"name":"b","email":"b@b.com","age":2}' http://localhost:8080/api_rest/api/person/putById?id=2 | jq
Delete
curl -X DELETE -H "Content-Type: application/json" http://localhost:8080/api_rest/api/person/deleteById?id=8 | jq




http://sinbugs.com/como-crear-un-microservicio-o-servicio-web-rest-con-spring-boot-1/
https://www.javadevjournal.com/spring-boot/spring-boot-rest-example/
https://www.nigmacode.com/java/Crear-API-REST-con-Spring
